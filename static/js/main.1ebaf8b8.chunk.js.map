{"version":3,"sources":["components/AddCategory/AddCategory.tsx","components/GiftGridItem/GiftGridItem.tsx","helpers/getGift.ts","hooks/useFetchGifs.ts","components/GiftGrid/GiftGrid.tsx","components/GiftExpertApp/GiftExpertApp.tsx","index.tsx"],"names":["defaultProps","AddCategory","props","useState","value","setValue","className","onSubmit","e","preventDefault","trim","length","addCategory","type","onChange","target","placeholder","GiftGridItem","image","data-testid","src","imgUrl","alt","href","bitly_url","title","getGiftByCategory","category","a","fetch","encodeURI","json","data","map","id","images","downsized_medium","url","console","log","useFetchGifs","gifts","loading","setGifts","useEffect","GiftGrid","GiftExpertApp","categorys","setCategorys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAMMA,EAAe,GAqCNC,EAjCK,SAACC,GACnBA,EAAK,2BAAQF,GAAiBE,GADQ,MAGZC,mBAAS,IAHG,mBAG/BC,EAH+B,KAGxBC,EAHwB,KActC,OACE,qBAAKC,UAAU,kBAAf,SAEE,sBAAMC,SAVY,SAACC,GACrBA,EAAEC,iBACEL,EAAMM,OAAOC,OAAS,IACxBT,EAAMU,YAAYR,GAClBC,EAAS,MAMT,SACE,uBACEQ,KAAK,OACLT,MAAOA,EACPE,UAAU,cACVQ,SAlBc,SAACN,GACrBH,EAASG,EAAEO,OAAOX,QAkBZY,YAAY,gBC5BhBhB,EAAe,GAiBNiB,EAhBM,SAACf,GAAmB,IAE/BgB,GADRhB,EAAK,2BAAQF,GAAiBE,IACtBgB,MAER,OACE,sBAAKC,cAAY,eAAeb,UAAU,cAA1C,UACE,qBAAKc,IAAKF,EAAMG,OAAQC,IAAI,KAC5B,mBAAGC,KAAML,EAAMM,UAAf,SACE,6BAAKN,EAAMO,c,uBCWJC,EAvBQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAGRC,MAAM,mFAAD,OAC4EC,UAC/EH,GAFG,cAHG,8BAQhBI,OARgB,cAEdC,EAFc,yBAUXA,EAAKA,KAAKC,KAAI,SAACf,GAClB,MAAO,CACHgB,GAAIhB,EAAMgB,GACVT,MAAOP,EAAMO,MACbD,UAAWN,EAAMM,UACjBH,OAAQH,EAAMiB,OAAOC,iBAAiBC,SAf5B,gCAmBlBC,QAAQC,IAAR,MAnBkB,yDAAH,sDCkBRC,EAhBM,SAACb,GAAoC,IAAD,EAE3BxB,mBAAS,CAC/BsC,MAAO,GAAIC,SAAS,IAH6B,mBAE9CD,EAF8C,KAEvCE,EAFuC,KAcrD,OARAC,qBAAU,WACN,sBAAC,sBAAAhB,EAAA,kEACGe,EADH,SAEoBjB,EAAkBC,GAFtC,yBAEOc,MAFP,KAGOC,SAAS,IAHhB,wDAAD,KAMD,CAACf,IACGc,GCXLzC,EAAe,GAsBN6C,EApBE,SAAC3C,GAAmB,IAE3ByB,GADRzB,EAAK,2BAAQF,GAAiBE,IACtByB,SAF2B,EAGRa,EAAab,GAAhCc,EAH2B,EAG3BA,MAAOC,EAHoB,EAGpBA,QAEf,OACE,sBAAKvB,cAAY,WAAWb,UAAU,iBAAtC,UACE,oBAAIA,UAAU,iBAAd,SAAgCqB,IAChC,mBAAGrB,UAAU,eAAb,SAA6BoC,EAAU,eAAiB,KACxD,qBAAKpC,UAAU,kDAAf,SACGmC,EAAMR,KAAI,SAACzB,GAAD,OACT,cAAC,EAAD,CAAyBU,MAAOV,GAAbA,EAAE0B,aCfzBlC,EAAe,GAwBN8C,EAvBO,SAAC5C,GACrBA,EAAK,2BAAQF,GAAiBE,GADU,MAGNC,mBAAS,CAAC,mBAHJ,mBAGjC4C,EAHiC,KAGtBC,EAHsB,KAOxC,OACE,gCACE,sBAAK1C,UAAU,oCAAf,UACE,oBAAIA,UAAU,YAAd,0BACA,cAAC,EAAD,CAAaM,YAPE,SAACe,GACpBqB,EAAa,CAACrB,GAAF,mBAAeoB,WASzB,qBAAKzC,UAAU,GAAf,SACGyC,EAAUd,KAAI,SAACzB,GACd,OAAO,cAAC,EAAD,CAAkBmB,SAAUnB,GAAbA,Y,MChBhCyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1ebaf8b8.chunk.js","sourcesContent":["import React, { SyntheticEvent, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\ninterface MyProps {\n  addCategory(category: string): void;\n}\nconst defaultProps = {\n  // optionalText: \"Soy un subtitulo opcional\",\n};\n\nconst AddCategory = (props: MyProps) => {\n  props = { ...defaultProps, ...props };\n\n  const [value, setValue] = useState(\"\");\n  const handlerChange = (e: any) => {\n    setValue(e.target.value);\n  };\n  const handlerSubmit = (e: SyntheticEvent) => {\n    e.preventDefault();\n    if (value.trim().length > 2) {\n      props.addCategory(value);\n      setValue(\"\");\n    }\n  };\n  return (\n    <div className=\"container-input\">\n      {/* <p>Search:</p> */}\n      <form onSubmit={handlerSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          className=\"input-query\"\n          onChange={handlerChange}\n          placeholder=\"Search\"\n        />\n      </form>\n    </div>\n  );\n};\n\nAddCategory.propTypes = {\n  addCategory: PropTypes.func.isRequired,\n};\nexport default AddCategory;\n","import React from \"react\";\nimport GiftImage from \"../../api/interfaces/GiftImage\";\ninterface MyProps {\n  image: GiftImage;\n}\nconst defaultProps = {};\nconst GiftGridItem = (props: MyProps) => {\n  props = { ...defaultProps, ...props };\n  const { image } = props;\n\n  return (\n    <div data-testid=\"GiftGridItem\" className=\"card-gift  \">\n      <img src={image.imgUrl} alt=\"\" />\n      <a href={image.bitly_url}>\n        <h1>{image.title}</h1>\n      </a>\n    </div>\n  );\n};\n\nGiftGridItem.propTypes = {};\n\nexport default GiftGridItem;\n","import GiftImage from \"../api/interfaces/GiftImage\";\n\nconst getGiftByCategory = async (category: string) => {\n    try {\n        let data = await (\n            await fetch(\n                `https://api.giphy.com/v1/gifs/search?api_key=R4crr9k3wTfV8ISXAxeiCr51A5qQNGaA&q=${encodeURI(\n                    category\n                )}&limit=12`\n            )\n        ).json();\n\n        return data.data.map((image: any) => {\n            return {\n                id: image.id,\n                title: image.title,\n                bitly_url: image.bitly_url,\n                imgUrl: image.images.downsized_medium.url,\n            } as GiftImage;\n        });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport default getGiftByCategory;","import { useEffect, useState } from \"react\";\nimport UseFetchGift from \"../api/interfaces/UseFetchGift\";\nimport getGiftByCategory from \"../helpers/getGift\";\n\nconst useFetchGifs = (category: string): UseFetchGift => {\n\n    const [gifts, setGifts] = useState({\n        gifts: [], loading: true\n    } as UseFetchGift);\n\n    useEffect(() => {\n        (async () => {\n            setGifts({\n                gifts: await getGiftByCategory(category),\n                loading: false\n            } as UseFetchGift);\n        })();\n    }, [category])\n    return gifts;\n}\nexport default useFetchGifs;","import React from \"react\";\nimport GiftImage from \"../../api/interfaces/GiftImage\";\nimport GiftGridItem from \"../GiftGridItem/GiftGridItem\";\nimport useFetchGifs from \"../../hooks/useFetchGifs\";\ninterface MyProps {\n  category: string;\n}\nconst defaultProps = {};\n\nconst GiftGrid = (props: MyProps) => {\n  props = { ...defaultProps, ...props };\n  const { category } = props;\n  const { gifts, loading } = useFetchGifs(category);\n\n  return (\n    <div data-testid=\"GiftGrid\" className=\"container-grid\">\n      <h1 className=\"title-category\">{category}</h1>\n      <p className=\"text-loading\">{loading ? \"Cargando....\" : \"\"}</p>\n      <div className=\"card-grid animate__animated animate__backInLeft\">\n        {gifts.map((e: GiftImage) => (\n          <GiftGridItem key={e.id} image={e} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nGiftGrid.propTypes = {};\n\nexport default GiftGrid;\n","import React, { useState } from \"react\";\nimport AddCategory from \"../AddCategory/AddCategory\";\nimport GiftGrid from \"../GiftGrid/GiftGrid\";\n\ninterface MyProps {}\nconst defaultProps = {};\nconst GiftExpertApp = (props: MyProps) => {\n  props = { ...defaultProps, ...props };\n\n  const [categorys, setCategorys] = useState([\"rick and morty\"]);\n  const handlerClick = (category: string) => {\n    setCategorys([category, ...categorys]);\n  };\n  return (\n    <div>\n      <div className=\"animate__animated animate__bounce\">\n        <h2 className=\"title-app\">GiftAppReact</h2>\n        <AddCategory addCategory={handlerClick} />\n      </div>\n\n      <div className=\"\">\n        {categorys.map((e) => {\n          return <GiftGrid key={e} category={e} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default GiftExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GiftExpertApp from \"./components/GiftExpertApp/GiftExpertApp\";\nimport \"./index.css\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GiftExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}